{"version":3,"sources":["logo.svg","components/FormComponent/FormComponent.Validation.js","components/FormComponent/FormComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","formComponentValidation","Yup","shape","title","min","required","body","FormComponent","className","initialValues","validateOnBlur","validationSchema","onSubmit","values","console","log","errors","touched","status","htmlFor","type","placeholder","name","render","msg","rows","component","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sJAAAA,EAAOC,QAAU,IAA0B,kC,wLCW5BC,EATiBC,MAAaC,MAAM,CAClDC,MAAOF,MACLG,IAAI,EAAG,iCACPC,SAAS,gCACXC,KAAML,MACJG,IAAI,GAAI,6CACRC,SAAS,8CCiEGE,EApEO,WAMrB,OACC,yBAAKC,UAAU,kBACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,aACd,wBAAIA,UAAU,+BAAd,cACA,yBAAKA,UAAU,OACd,yBAAKA,UAAU,oBACd,yBAAKA,UAAU,gBACd,yBAAKA,UAAU,eACd,wBAAIA,UAAU,QAAd,aAED,yBAAKA,UAAU,aACd,kBAAC,IAAD,CACCC,cACC,CACCN,MAAO,GACPG,KAAM,IAGRI,gBAAgB,EAChBC,iBAAkBX,EAClBY,SAzBQ,SAACC,GACjBC,QAAQC,IAAIF,MA0BH,gBAAEG,EAAF,EAAEA,OAAgBC,GAAlB,EAAUC,OAAV,EAAkBD,SAAlB,OACA,kBAAC,IAAD,KACC,yBAAKT,UAAU,cACd,2BAAOW,QAAQ,SAAf,SACA,kBAAC,IAAD,CAAOC,KAAK,OACRZ,UAAS,uBAAmBQ,EAAOb,OAASc,EAAQd,MAAS,cAAgB,IAC7EkB,YAAY,QACZC,KAAK,UAET,kBAAC,IAAD,CAAcA,KAAK,QACZC,OAAQ,SAAAC,GAAG,OAAI,2BAAOhB,UAAU,eAAc,gCAASgB,QAG/D,yBAAKhB,UAAU,cACd,2BAAOW,QAAQ,eAAf,eACA,kBAAC,IAAD,CAAOX,UAAS,uBAAmBQ,EAAOV,MAAQW,EAAQX,KAAQ,cAAgB,IAC9EmB,KAAK,IACLC,UAAU,WACVL,YAAY,qBACZC,KAAK,SAET,kBAAC,IAAD,CAAcA,KAAK,OACZC,OAAQ,SAAAC,GAAG,OAAI,2BAAOhB,UAAU,eAAjB,IAAgC,gCAASgB,QAGhE,4BAAQJ,KAAK,SAASZ,UAAU,0BAAhC,oB,iBC1CGmB,MAXf,WACE,OACE,yBAAKnB,UAAU,QACb,yBAAKA,UAAU,eACb,yBAAKoB,IAAKC,IAAMrB,UAAU,WAAWsB,IAAI,UAE3C,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASb,OACP,kBAAC,IAAMc,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.cd6ec1f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import * as Yup from 'yup';\r\n\r\nconst formComponentValidation = Yup.object().shape({\r\n\ttitle: Yup.string()\r\n\t\t.min(5, 'The title field is too short.')\r\n\t\t.required('The title field is required.'),\r\n\tbody: Yup.string()\r\n\t\t.min(10, 'The body of the publication is too short.')\r\n\t\t.required('The body of the publication is required.'),\r\n});\r\n\r\nexport default formComponentValidation;","import React from \"react\";\r\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\r\n\r\nimport formComponentValidation from './FormComponent.Validation';\r\n\r\nconst FormComponent = () => {\r\n\t\r\n\tconst sendForm = (values) => {\r\n\t\tconsole.log(values)\r\n\t};\r\n\t\r\n\treturn (\r\n\t\t<div className=\"container py-3\">\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-md-12\">\r\n\t\t\t\t\t<h2 className=\"text-center text-white mb-4\">React Form</h2>\r\n\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t<div className=\"col-md-6 mx-auto\">\r\n\t\t\t\t\t\t\t<div className=\"card rounded\">\r\n\t\t\t\t\t\t\t\t<div className=\"card-header\">\r\n\t\t\t\t\t\t\t\t\t<h3 className=\"mb-0\">Add Post</h3>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t\t\t\t<Formik\r\n\t\t\t\t\t\t\t\t\t\tinitialValues={\r\n\t\t\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t\t\ttitle: '',\r\n\t\t\t\t\t\t\t\t\t\t\t\tbody: ''\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tvalidateOnBlur={false}\r\n\t\t\t\t\t\t\t\t\t\tvalidationSchema={formComponentValidation}\r\n\t\t\t\t\t\t\t\t\t\tonSubmit={sendForm}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{({errors, status, touched}) => (\r\n\t\t\t\t\t\t\t\t\t\t\t<Form>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"title\">Title</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field type=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t className={`form-control ${(errors.title && touched.title) ? ' is-invalid' : ''}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t placeholder=\"title\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t name=\"title\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"title\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trender={msg => <small className=\"text-danger\"><strong>{msg}</strong></small>}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"publication\">Publication</label>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<Field className={`form-control ${(errors.body && touched.body) ? ' is-invalid' : ''}`}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t rows=\"5\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t component=\"textarea\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t placeholder=\"Write something...\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t name=\"body\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<ErrorMessage name=\"body\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\trender={msg => <small className=\"text-danger\"> <strong>{msg}</strong></small>}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<button type=\"submit\" className=\"btn btn-block btn-info\">Send</button>\r\n\t\t\t\t\t\t\t\t\t\t\t</Form>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</Formik>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default FormComponent;\r\n","import React from 'react';\nimport './App.css';\n\nimport {FormComponent} from './components/index'\nimport logo from \"./logo.svg\";\n\nfunction App() {\n  return (\n    <div className=\"Main\">\n      <div className=\"Center-icon\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n      </div>\n      <FormComponent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}